MODULE BudgetCycle;

REQUIRE Cycle, Step, Budget, CostCenterEmployee, BudgetCapCenter;

NAMESPACE Budget;

EXTEND CLASS Stage 
{
    budgeting 'Budgeting cycle'
}
onStarted() + { 
    color(Stage s) <- RGB(240, 225, 255) WHERE s == Stage.budgeting; 
}
GROUP roleBudgeting 'Budgeting';

//--- Objects --

CLASS BudgetPortion 'Budget Portion';
TABLE budgetpart(BudgetPortion);

author 'Author' = DATA Employee (BudgetPortion);
authorName 'Author' (BudgetPortion b) = name(author(b)) CHARWIDTH 20;
dateTime 'Created' = DATA DATETIME (BudgetPortion) CHARWIDTH 20;

sbj = ABSTRACT BudgetPortion (Assign) MATERIALIZED;
part = DATA BudgetPortion (BudgetDetail); // Budget Proposal may include multiple items, each is named BudgetDetail

planned 'Planned, USD' (BudgetPortion b) = GROUP SUM planned(BudgetDetail d) IF  part(d) == b;
numberCostCenter 'Number by Cost Center' (BudgetPortion b, CostCenter c) = GROUP SUM 1 IF  part(BudgetDetail d) == b AND costCenter(d) == c;
numberEmployee 'Number by Employee' (BudgetPortion b, Employee e) = GROUP SUM numberCostCenter(b,CostCenter c) IF access(c,e); 
access 'Access' (BudgetPortion b, Employee e) = TRUE IF numberEmployee(b,e) > 0; 

author (BudgetPortion b) <- currentUser() WHEN SET(b IS BudgetPortion);
dateTime(BudgetPortion b) <- currentDateTime() WHEN CHANGED(planned(b));

META extendBudgetPortion (form)
    EXTEND FORM ##form
        PROPERTIES(o) READONLY authorName, dateTime, planned
        
        OBJECTS d = BudgetDetail
        PROPERTIES (d) descBudget, nameCostCenter, canonicalNameCostItem, name, planned, description PANEL , NEW, DELETE
        FILTERS part(d) == o
    ;

    DESIGN ##form {
        OBJECTS {
            NEW pane FIRST {
                fill = 1;
                alignment = STRETCH;
                type = CONTAINERV;
                NEW headerPart {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    MOVE PROPERTY(planned(o)) { alignment = START; }
                    MOVE PROPERTY(authorName(o)) { alignment = CENTER; }
                    MOVE PROPERTY(dateTime(o));
                }
                NEW proposal {
                    type = CONTAINERH;
                    fill = 1;
                    alignment = STRETCH;
                    MOVE BOX (d) {
                        fill = 4;
                        alignment = STRETCH;
                    }
                    MOVE PROPERTY (description(d)) {
                        fill = 1;
                        alignment = STRETCH;
                        panelCaptionAbove = TRUE;
                    }                                
                }
            }
        }
    }    
END

FORM budgetPortion 'Edit single Budget Proposal'
    OBJECTS o = BudgetPortion PANEL
    EDIT BudgetPortion OBJECT o
;
@extendBudgetPortion(budgetPortion);

//--- Initialize Procedure ---

@defineStep(budgeting,'Budgeting cycle',BudgetPortion);
EXTEND CLASS Step
{
    enter 'Entered',
    review 'Reviewed',
    approve 'Approved',
    reject 'Rejected',
    update 'Update'
}

WHEN SETCHANGED (step(BudgetPortion s)) DO {
    FOR part(BudgetDetail d) == s DO {
        IF step(s) == Step.update OR step(s) == Step.enter OR step(s) == Step.reject THEN
            hiddenSet(d) <- TRUE;
        ELSE hiddenSet(d) <- NULL;
        IF step(s) == Step.enter OR step(s) == Step.review OR step(s) == Step.approve THEN
            isProcessing(d) <- TRUE;
        ELSE isProcessing(d) <- NULL;
    }
}

newPart '+ Add' ()  { 
    NEWSESSION {
        NEW b = BudgetPortion {
            author (b) <- currentUser();
            dateTime(b) <- currentDateTime();
            step(b) <- Step.update;
            SHOW EDIT BudgetPortion = b DOCKED MANAGESESSION;
        }
    }
}

FORM budgetPortions 'Budget Proposals'
    OBJECTS o = BudgetPortion
    PROPERTIES(o) READONLY authorName, dateTime, planned, nameStep
    PROPERTIES newPart() 
    PROPERTIES(o) NEWSESSION editPart = EDIT, delPart = DELETE SHOWIF afg(currentUser())
    FILTERS author(o) == currentUser() OR afg(currentUser()) OR access(o,currentUser())
    
    OBJECTS bcid=(b=Budget,c=CostCenter,i=CostItem,d = BudgetDetail)
    PROPERTIES (b) READONLY description
    PROPERTIES (c) READONLY name
    PROPERTIES (i) READONLY canonicalName
    PROPERTIES(d) READONLY name, planned, description PANEL
    FILTERS o == part(d) AND b == budget(d) AND c == costCenter(d) AND i == costItem(d)
    
    LIST BudgetPortion OBJECT o
;

DESIGN budgetPortions {
    //REMOVE TOOLBARRIGHT;
    OBJECTS {
        NEW pane {
            fill = 1;
            alignment = STRETCH;
            type = CONTAINERV;
            NEW proposal {
                type = CONTAINERH;
                fill = 4;
                alignment = STRETCH;
                MOVE BOX (o) {
                    fill = 1;
                    alignment = STRETCH;
                    TOOLBAR {
                        MOVE PROPERTY (newPart());
                        MOVE PROPERTY (editPart);
                        MOVE PROPERTY (delPart);
                    }
                }
                NEW details {
                    fill = 3;
                    alignment = STRETCH;
                    type = CONTAINERV;
                    MOVE BOX (bcid) {
                        fill = 4;
                        alignment = STRETCH;
                        PROPERTY (description(b)) { caption='Budget'; }
                        PROPERTY (name(c)) { caption='Cost Center'; }
                        PROPERTY (canonicalName(i)) { caption='Cost type'; }
                        PROPERTY (name(d)) { caption='Budget Detail'; }
                    }
                    MOVE PROPERTY (description(d)) {
                        fill = 1;
                        alignment = STRETCH;
                        panelCaptionAbove = TRUE;
                    }                                
                }
            } 
            NEW proc {
                fill = 1;
                alignment = STRETCH;
            }
        }
    }
}

//--- Procedure: Init and Update Steps ---

@defineAssignment(BudgetPortion, budgeting, update, 'Complete Budget Proposal editing',planned);
@extendBudgetPortion(update);
assigned(Employee e,AssignUpdate a) += TRUE IF author(sbj(a)) == e AND a IS AssignUpdate;// OR access(sbj(a),e);

userEntered 'Send all new records for Review' () { 
        FOR StepLog l AND stepIn(l) = Step.update AND NOT stepOut(l) AND author(sbj(l)) == currentUser() DO {
            stepOut(l) <- Step.enter;
            DIALOG completeUpdate OBJECTS l = l FLOAT MANAGESESSION;
        } 
} TOOLBAR;
userUpdated 'There is new proposal within this employee' () = 
            TRUE IF [GROUP SUM 1 IF sbj(StepLog l) == part(BudgetDetail d) AND stepIn(l) = Step.update AND NOT stepOut(l) BY author(sbj(l))](currentUser());
EXTEND FORM costCenterBudget PROPERTIES userEntered() SHOWIF userUpdated();
DESIGN costCenterBudget { BOX (bm) {TOOLBAR {MOVE PROPERTY(userEntered()); } } }

//--- Procedure: Review and Review Updated Steps ---

@defineAssignment(BudgetPortion, budgeting, enter, 'Financial review',planned);
@extendBudgetPortion(enter);
assigned(Employee e,AssignEnter a) += TRUE IF (afg(e) OR hasEnter(e)) AND a IS AssignEnter;

//--- Procedure: Approve Step ---

@defineAssignment(BudgetPortion, budgeting, review, 'Budget Approval',planned);
@extendBudgetPortion(review);
assigned(Employee e,AssignReview a) += TRUE IF (name(position(e)) == 'CEO' OR hasReview(e)) AND a IS AssignReview;

//--- Procedure: Updating information on Reject Step ---

@defineAssignment(BudgetPortion, budgeting, reject, 'Revising Budgeting record',planned);
@extendBudgetPortion(reject);
assigned(Employee e,AssignReject a) += TRUE IF author(sbj(a)) == e AND a IS AssignReject; //OR afg(e) OR access(sbj(a),e);

//--- Automotive Proposal initialization ---

author 'Author' = DATA Employee(BudgetDetail);
searchProposal 'Search active proposals' (Employee e) = GROUP LAST BudgetPortion p IF step(p) == Step.update AND author(p) == e;
WHEN SET (budget(BudgetDetail b)) AND NOT part(b) DO {
    author(b) <- currentUser();
    hiddenSet(b) <- TRUE;
    IF searchProposal(author(b)) THEN
        part(b) <- searchProposal(author(b));
    ELSE
        NEW p = BudgetPortion {        
            part(b) <- p;
            step(p) <- Step.update;
        }
}

//--- Logging Procedure ---

authorName 'Proposal Author' (StepLog s) = authorName(sbj(s)) CHARWIDTH 20;
dateTime 'Proposal Created' (StepLog s) = dateTime(sbj(s)) CHARWIDTH 20;
planned 'Planned, USD' = DATA NUMERIC[16,3](StepLog);

CLASS BudgetDetailLog 'Budgeting Log';
TABLE budgetDetailLog(BudgetDetailLog);

log 'Step Log' = DATA StepLog(BudgetDetailLog);
budget 'Budget' = DATA Budget(BudgetDetailLog);
costCenter 'Cost Center' = DATA CostCenter(BudgetDetailLog);
costItem 'Cost Item' = DATA CostItem(BudgetDetailLog);
name 'Name' = DATA STRING[100](BudgetDetailLog);
description 'Description' = DATA RICHTEXT(BudgetDetailLog);
planned 'Planned, USD' = DATA NUMERIC[16,3](BudgetDetailLog);

WHEN SETCHANGED (stepOut(StepLog l)) DO {
    planned(l) <- planned(sbj(l));
    FOR part(BudgetDetail b) == sbj(l) NEW d = BudgetDetailLog DO {
        log(d) <- l;
        budget(d) <- budget(b);
        costCenter(d) <- costCenter(b);
        costItem(d) <- costItem(b);
        name(d) <- name(b);
        description(d) <- description(b);
        planned(d) <- planned(b);
    }
}

FORM steplog 'Budgeting log'
    OBJECTS l = StepLog
    PROPERTIES(l) READONLY authorName, dateTime, planned READONLY
    
    OBJECTS d = BudgetDetailLog
    PROPERTIES READONLY =description(budget(d)), =name(costCenter(d)), =canonicalName(costItem(d))
    PROPERTIES (d) READONLY name, planned, description PANEL
    FILTERS log(d) == l
;
DESIGN steplog {
    OBJECTS { 
        NEW pane { 
            fill = 2; 
            alignment = STRETCH; 
        }
        NEW details { 
            fill = 1; 
            caption = 'Details of budgeting log';
            type = CONTAINERH; 
            alignment = STRETCH; 
            MOVE BOX(d) {
                caption = '';
                fill = 4;
                alignment = STRETCH;
            }
            MOVE PROPERTY(description(d)) {
                fill = 1;
                alignment = STRETCH;
                panelCaptionAbove = TRUE;
            }
        }
    }
}
@extendDetails(steplog,pane,h);
@showStepAttributes(steplog,in);
@showStepAttributes(steplog,out);

EXTEND FORM budgetPortions OBJECTS l = StepLog PROPERTIES planned(l) READONLY FILTERS sbj(l) == o AND stepOut(l);
@extendDetails(budgetPortions,proc,h);
@showStepAttributes(budgetPortions,out);

NAVIGATOR {
    proc { NEW budgetPortions AFTER assignments; }
    logging { NEW steplog; }
}
