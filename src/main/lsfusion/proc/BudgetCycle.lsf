MODULE BudgetCycle;

REQUIRE Cycle, Step, Budget, CostCenterEmployee, BudgetCapCenter, Chat;

NAMESPACE Budget;

EXTEND CLASS Stage 
{
    budgeting 'Budgeting cycle'
}
onStarted() + { 
    color(Stage s) <- RGB(240, 225, 255) WHERE s == Stage.budgeting; 
}
GROUP roleBudgeting 'Budgeting';

//--- Objects --

CLASS BudgetPortion 'Budget Portion';
TABLE budgetpart(BudgetPortion);

author 'Author' = DATA Employee (BudgetPortion);
//authorName 'Author' (BudgetPortion b) = name(author(b)) CHARWIDTH 20;
dateTime 'Created' = DATA DATETIME (BudgetPortion) CHARWIDTH 20;
costCenter 'Cost Center' = DATA CostCenter(BudgetPortion);
nameCostCenter 'Cost Center' (BudgetPortion o) = name(costCenter(o));

sbj = ABSTRACT BudgetPortion (Assign) MATERIALIZED;
part = DATA BudgetPortion (BudgetDetail); // Budget Proposal may include multiple items, each is named BudgetDetail

planned 'Planned, USD' (BudgetPortion b) = GROUP SUM planned(BudgetDetail d) IF  part(d) == b;
numberCostCenter 'Number by Cost Center' (BudgetPortion b, CostCenter c) = GROUP SUM 1 IF  part(BudgetDetail d) == b AND costCenter(d) == c;
numberEmployee 'Number by Employee' (BudgetPortion b, Employee e) = GROUP SUM numberCostCenter(b,CostCenter c) IF access(c,e); 
access 'Access' (BudgetPortion b, Employee e) = TRUE IF numberEmployee(b,e) > 0; 

author (BudgetPortion b) <- currentUser() WHEN SET(b IS BudgetPortion);
dateTime(BudgetPortion b) <- currentDateTime() WHEN CHANGED(planned(b));

author 'Author' = DATA Employee(BudgetDetail);
numberAuthors 'Number from Employees' (BudgetPortion b, Employee e) = GROUP SUM 1 IF author(BudgetDetail d) == e AND part(d) = b; 
authorName 'Author' (BudgetPortion b) = GROUP CONCAT name(Employee e),'; ' IF numberAuthors(b,e) > 0 ORDER name(e) CHARWIDTH 15;
nameExplain 'Cost Centers involved' (BudgetPortion b) = CONCAT ' ',nameCostCenter(b),('('+authorName(b)+')')  CHARWIDTH 50;

// Quarters
quarterNumber 'Quarter ID' (Budget b) = extractYear(fromDate(b))*10 + floor( DOUBLE (extractMonthNumber(fromDate(b)) - 1) / 3 + 1 ) MATERIALIZED;
quarter = GROUP AGGR Budget b BY quarterNumber(b); 

// Enable Chat
newComment 'New Comment' = DATA LOCAL TEXT (BudgetDetail);
budgetDetail 'Budget Detail' = DATA BudgetDetail(Message);

//--- Initialize Procedure ---

@defineStep(budgeting,'Budgeting cycle',BudgetPortion);
@defineNotification(budgeting,'Budgeting cycle',BudgetPortion,costCenter);
EXTEND CLASS Step
{
    enter 'Entered',
    review 'Reviewed',
    approve 'Approved',
    reject 'Revising',
    update 'Update'
}
hideVariant 'Logics for hiding variant buttons' = DATA BOOLEAN (Step,Step);
hideVariant 'Logics for hiding variant buttons' (StepLog l, Step stepOut) = hideVariant (stepIn(l),stepOut);
EXTEND FORM stepsBudgeting PROPERTIES hideVariant(sIn,sOut) BACKGROUND backgroundFill() COLUMNS (sOut) HEADER name(sOut);

background 'Background Color' = DATA COLOR (Step);
onStarted() + { 
    background(Step r) <- RGB(204,229,255) WHERE r == Step.enter; // deep blue
    background(Step r) <- RGB(255,255,204) WHERE r == Step.review; // yellow
    background(Step r) <- RGB(204,255,204) WHERE r == Step.approve; // green
    background(Step r) <- RGB(255,204,255) WHERE r == Step.reject; // purple
    background(Step r) <- RGB(204,255,255) WHERE r == Step.update; // blue
}

WHEN SETCHANGED (step(BudgetPortion s)) DO {
    FOR part(BudgetDetail d) == s DO {
        IF step(s) == Step.update OR step(s) == Step.enter OR step(s) == Step.reject THEN
            hiddenSet(d) <- TRUE;
        ELSE hiddenSet(d) <- NULL;
        IF step(s) == Step.enter OR step(s) == Step.review OR step(s) == Step.approve THEN

            isProcessing(d) <- TRUE;
        ELSE isProcessing(d) <- NULL;
    }
}

newPart '+ Add' ()  { 
    NEWSESSION {
        NEW b = BudgetPortion {
            author (b) <- currentUser();
            dateTime(b) <- currentDateTime();
            step(b) <- Step.update;
            DIALOG listCostCenters OBJECTS c = costCenter(b) CHANGE;
            SHOW EDIT BudgetPortion = b DOCKED MANAGESESSION;
        }
    }
}

FORM budgetPortion 'Edit single Budget Proposal'
    OBJECTS o = BudgetPortion PANEL
    EDIT BudgetPortion OBJECT o
;


FORM budgetPortions 'Budget Proposals'
    OBJECTS o = BudgetPortion
    PROPERTIES(o) READONLY nameExplain, dateTime, planned, nameStep, authorName
    PROPERTIES newPart() 
    PROPERTIES(o) NEWSESSION editPart = EDIT SHOWIF afg(currentUser()), delPart = DELETE SHOWIF afg(currentUser())
    FILTERS author(o) == currentUser() OR afg(currentUser()) OR access(o,currentUser())
    
    OBJECTS bcid=(b=Budget,c=CostCenter,i=CostItem,d = BudgetDetail)
    PROPERTIES (b) READONLY description
    PROPERTIES (c) READONLY name
    PROPERTIES (i) READONLY canonicalName
    PROPERTIES(d) READONLY name, planned, description PANEL
    FILTERS o == part(d) AND b == budget(d) AND c == costCenter(d) AND i == costItem(d),
            (hideSensitive(mainRole(currentUser())) AND NOT sensitive(d)) OR NOT hideSensitive(mainRole(currentUser()))
            
    LIST BudgetPortion OBJECT o
;

DESIGN budgetPortions {
    //REMOVE TOOLBARRIGHT;
    OBJECTS {
        NEW pane {
            fill = 1;
            alignment = STRETCH;
            type = CONTAINERV;
            NEW proposal {
                type = CONTAINERH;
                fill = 1;
                alignment = STRETCH;
                MOVE BOX (o) {
                    fill = 3;
                    alignment = STRETCH;
                    caption = 'Budget Proposals';
                    TOOLBAR {
                        MOVE PROPERTY (newPart());
                        MOVE PROPERTY (editPart) { caption = 'View details'; }
                        MOVE PROPERTY (delPart);
                    }
                }
                NEW proc {
                    width = 500;
                    alignment = STRETCH;
                }
            } 
            NEW details {
                fill = 1;
                alignment = STRETCH;
                type = CONTAINERH;
                MOVE BOX (bcid) {
                    fill = 1;
                    alignment = STRETCH;
                    PROPERTY (description(b)) { caption='Budget'; }
                    PROPERTY (name(c)) { caption='Cost Center'; }
                    PROPERTY (canonicalName(i)) { caption='Cost type'; }
                    PROPERTY (name(d)) { caption='Budget Detail'; }
                }
                NEW itemDetails {
                    width = 250;
                    alignment = STRETCH;
                    MOVE PROPERTY (description(d)) {
                        fill = 1;
                        alignment = STRETCH;
                        panelCaptionAbove = TRUE;
                    }                 
                }
            }
        }
    }
}

//--- Procedure: Init and Update Steps ---

@defineAssignment(BudgetPortion, budgeting, update, 'Complete Budget Proposal editing',planned);
assigned(Employee e,AssignUpdate a) += TRUE IF author(sbj(a)) == e OR (access(sbj(a),currentUser()) AND hasUpdate(e)) AND a IS AssignUpdate;// OR access(sbj(a),e);
@buttonDecisions(update,enter,'Send the Budget Proposal for Review');

userEntered 'Send all new records for Review' () { 
        FOR StepLog l AND stepIn(l) = Step.update AND NOT stepOut(l) AND author(sbj(l)) == currentUser() DO {
            stepOut(l) <- Step.enter;
            DIALOG completeUpdate OBJECTS l = l FLOAT MANAGESESSION;
        } 
} TOOLBAR;
userUpdated 'New proposals from this Employee exist' () = 
            TRUE IF [GROUP SUM 1 IF sbj(StepLog l) == part(BudgetDetail d) AND stepIn(l) = Step.update AND NOT stepOut(l) BY author(sbj(l))](currentUser());
centerEntered 'Send all new records for Review' (CostCenter c) { 
        FOR StepLog l AND stepIn(l) = Step.update AND NOT stepOut(l) AND costCenter(sbj(l)) == c DO {
            stepOut(l) <- Step.enter;
            DIALOG completeUpdate OBJECTS l = l FLOAT MANAGESESSION;
        } 
} TOOLBAR;
centerUpdated 'New proposals within this Cost Center exist' (CostCenter c) = // independent from the process status. Otherwise a stepIn/Out filter needed like commented below
            TRUE IF [GROUP SUM 1 IF sbj(StepLog l) == part(BudgetDetail d) BY costCenter(sbj(l))](c); // AND stepIn(l) = Step.update AND NOT stepOut(l)
EXTEND FORM costCenterBudget PROPERTIES centerEntered(c) SHOWIF centerUpdated(c);
DESIGN costCenterBudget { BOX (bm) {TOOLBAR {MOVE PROPERTY(centerEntered(c)); } } }

//--- Procedure: Review and Review Updated Steps ---

@defineAssignment(BudgetPortion, budgeting, enter, 'Financial review',planned);
assigned(Employee e,AssignEnter a) += TRUE IF (afg(e) OR hasEnter(e)) AND a IS AssignEnter;
@buttonDecisions(enter,review,'Complete Review and send the Budget Proposal for Approval');
@buttonDecisions(enter,reject,'Reject and send the Budget Proposal back for revising');

//--- Procedure: Approve Step ---

@defineAssignment(BudgetPortion, budgeting, review, 'Budget Approval',planned);
assigned(Employee e,AssignReview a) += TRUE IF (name(position(e)) == 'CEO' OR hasReview(e)) AND a IS AssignReview;
@buttonDecisions(review,approve,'Approve the Budget');
@buttonDecisions(review,reject,'Reject and send the Budget Proposal back for revising');

isApproved (BudgetPortion s) = step(s) == Step.approve;
isApprovedDrop (BudgetPortion s) = step(s) == Step.approve AND afg(currentUser());
dropApproval 'Drop Approval' (BudgetPortion o) {
    stepOut(stepLog(o)) <- Step.reject;
    APPLY;
} TOOLBAR;
EXTEND FORM budgetPortions PROPERTIES(o) dropApproval SHOWIF isApprovedDrop(o);

WHEN SET(isApproved (BudgetPortion o)) DO {
    FOR Employee e AND (author(o) == e OR access(o,e) OR afg(e)) DO {
        sendNotification(o, e);
    }
}

//--- Procedure: Updating information on Reject Step ---

@defineAssignment(BudgetPortion, budgeting, reject, 'Revising Budgeting record',planned);
assigned(Employee e,AssignReject a) += TRUE IF author(sbj(a)) == e OR (access(sbj(a),currentUser()) AND hasReject(e)) AND a IS AssignReject; //OR afg(e) OR access(sbj(a),e);
@buttonDecisions(reject,enter,'Send the revised Budget Proposal for Review');

//--- Automotive Proposal initialization ---

searchProposal 'Search active proposals' (Employee e) = GROUP LAST BudgetPortion p IF step(p) == Step.update AND author(p) == e;
searchCenterProposal 'Search active proposals' (CostCenter c) = GROUP LAST BudgetPortion p IF step(p) == Step.update AND costCenter(p) == c;
WHEN SET (budget(BudgetDetail b)) AND NOT part(b) DO {
    author(b) <- currentUser();
    hiddenSet(b) <- TRUE;
    //IF searchProposal(author(b)) THEN
    //    part(b) <- searchProposal(author(b));
    IF searchCenterProposal(costCenter(b)) THEN
        part(b) <- searchCenterProposal(costCenter(b));
    ELSE
        NEW p = BudgetPortion {
            part(b) <- p;
            step(p) <- Step.update;
            costCenter(p) <- costCenter(b);
        }
}

//--- Logging Procedure ---

authorName 'Proposal Author' (StepLog s) = authorName(sbj(s)) CHARWIDTH 20;
dateTime 'Proposal Created' (StepLog s) = dateTime(sbj(s)) CHARWIDTH 20;
planned 'Planned, USD' = DATA NUMERIC[16,3](StepLog);

CLASS BudgetDetailLog 'Budgeting Log';
TABLE budgetDetailLog(BudgetDetailLog);

dateTime 'Date/Time' = DATA DATETIME (BudgetDetailLog);
item 'Budget Item' = DATA BudgetDetail(BudgetDetailLog);
log 'Step Log' = DATA StepLog(BudgetDetailLog);
budget 'Budget' = DATA Budget(BudgetDetailLog);
costCenter 'Cost Center' = DATA CostCenter(BudgetDetailLog);
costItem 'Cost Item' = DATA CostItem(BudgetDetailLog);
name 'Name' = DATA STRING[100](BudgetDetailLog);
description 'Description' = DATA RICHTEXT(BudgetDetailLog);
planned 'Planned, USD' = DATA NUMERIC[16,3](BudgetDetailLog);
value 'Summary' (BudgetDetailLog l) = RICHTEXT ('-------\n' + (OVERRIDE dateTime(l) + ':\n' + name(l) + ' - Planned, USD: ' + STRING(planned(l)) + 
                                                    ' (' + name(budget(l)) + '). Cost Type: ' + canonicalName(costItem(l)) , 'Some of necessary fields were empty') + 
                                                    (OVERRIDE '. Description: '+description(l),'') );

lastLog 'Record about last change' = GROUP LAST BudgetDetailLog bdl ORDER dateTime(bdl) BY item(bdl);
prevLog 'Record from previous status' = GROUP LAST BudgetDetailLog bdl IF bdl != lastLog(item(bdl)) ORDER dateTime(bdl) BY item(bdl);
isChanged 'The Budget item was changed on previous step' (BudgetDetail d) = TRUE IF (name(lastLog(d)) != name(prevLog(d)) 
                                                                                            OR costItem(lastLog(d)) != costItem(prevLog(d)) 
                                                                                            OR budget(lastLog(d)) != budget(prevLog(d)) 
                                                                                            OR planned(lastLog(d)) != planned(prevLog(d)))
                                                                                            AND lastLog(d) AND prevLog(d) MATERIALIZED;
lastValue 'Last value before the proposed change' (BudgetDetail d) = value(prevLog(d));
historyValue 'History values before the proposed change' (BudgetDetail d) = GROUP CONCAT value(BudgetDetailLog l),'\n' IF l != lastLog(item(l)) ORDER DESC dateTime(l) BY item(l) MATERIALIZED;
//background 'Background Color' (BudgetDetail d, BudgetPortion o) = IF NOT part(d) THEN RGB(240,240,240) // gray for old records
//                                                                            ELSE IF isChanged(d) AND part(d) == o AND step(o) != Step.approve THEN RGB(255,204,204) ELSE background(step(part(d))); // red if changed

messageFlagPrev 'New message from previous step' = DATA BOOLEAN (BudgetDetail);
messageFlagThis 'New message at this step' = DATA BOOLEAN (BudgetDetail);

background 'Background Color' (BudgetDetail d, BudgetPortion o) = IF NOT part(d) THEN RGB(240,240,240) ELSE IF messageFlagPrev(d) THEN RGB(255,204,204) ELSE RGB(255,255,255); // background(step(part(d)));

WHEN SETCHANGED (stepOut(StepLog l)) DO {
    planned(l) <- planned(sbj(l));
    FOR part(BudgetDetail b) == sbj(l) NEW d = BudgetDetailLog DO {
        dateTime(d) <- dateTimeOut(l);
        item(d) <- b;
        log(d) <- l;
        budget(d) <- budget(b);
        costCenter(d) <- costCenter(b);
        costItem(d) <- costItem(b);
        name(d) <- name(b);
        description(d) <- description(b);
        planned(d) <- planned(b);
        // background from messaging
        messageFlagPrev(b) <- NULL;
        IF messageFlagThis(b) THEN {
            messageFlagPrev(b) <- TRUE;
            messageFlagThis(b) <- NULL;
        }
    }
    FOR part(BudgetDetail d) == sbj(l) AND isChanged(d) NEW m = Message DO {
        dateTime(m) <- dateTimeOut(l);
        budgetDetail(m) <- d;
        author(m) <- currentUser();
        text(m) <- '';
        IF name(lastLog(d)) != name(prevLog(d)) THEN 
            text(m) <- text(m) + 'Name changed from "' + (OVERRIDE name(lastLog(d)),'') + '" \nto "' + (OVERRIDE name(prevLog(d)),'') + '"\n';
        IF costItem(lastLog(d)) != costItem(prevLog(d)) THEN 
            text(m) <- text(m) + 'Cost Type changed from "' + (OVERRIDE canonicalName(costItem(lastLog(d))),'') + '" \nto "' + (OVERRIDE canonicalName(costItem(prevLog(d))),'') + '"\n';
        IF budget(lastLog(d)) != budget(prevLog(d)) THEN 
            text(m) <- text(m) + 'Budget changed from ' + (OVERRIDE name(budget(lastLog(d))),'') + ' \nto ' + (OVERRIDE name(budget(prevLog(d))),'') + '\n';
        IF planned(lastLog(d)) != planned(prevLog(d)) THEN 
            text(m) <- text(m) + 'Planned sum changed from ' + (OVERRIDE STRING (planned(lastLog(d))),'') + ' USD to ' + (OVERRIDE STRING (planned(prevLog(d))),'') + ' USD\n';
        messageFlagPrev(d) <- TRUE;
    }
}

addBudgetDetail 'New budget item' (BudgetPortion o) {
    NEW d = BudgetDetail {
        part(d) <- o;
        costCenter(d) <- costCenter(o);
        author(d) <- currentUser();
        hiddenSet(d) <- TRUE IF step(o) != Step.review;
        SHOW budgetDetailAdd OBJECTS d = d FLOAT;
    }
} TOOLBAR;

pushBudgetDetail 'Pick this item into processing' (BudgetPortion o, BudgetDetail d) {
    part(d) <- o;
} TOOLBAR;

readonlyRun (BudgetPortion o, BudgetDetail d) = TRUE IF part(d) != o OR NOT part(d);

nameAuthorShort 'Author' (Message m) = TEXT(nameAuthor(m)+'\n'+STRING (dateTime(m))) CHARWIDTH 15;
textPrint 'Message' (Message m) = text(m) CHARWIDTH 30;
addComment 'Send Comment' (BudgetDetail b)  { 
    IF newComment(b) THEN {NEW m = Message {
                                   dateTime(m) <- currentDateTime();
                                   budgetDetail(m) <- b;
                                   author(m) <- currentUser();
                                   text(m) <- newComment(b);
                                   newComment(b) <- NULL;
                                   messageFlagThis(b) <- TRUE;
                               }
                               apply(); } 
    
}

META extendBudgetPortion (form)
    EXTEND FORM ##form
        PROPERTIES(o) READONLY nameCostCenter, authorName, planned//, dateTime
        
    PROPERTIES () nameFilterBudget , nameFilterCostItem
    //TREE costItems t = CostItem PARENT parent(t)
    //PROPERTIES(t) READONLY order SHOWIF NULL, name
    //ORDER order(t) 
        
    OBJECTS d = BudgetDetail
    PROPERTIES (d) READONLYIF readonlyRun(o,d) nameBudget, canonicalNameCostItem
    PROPERTIES (d) READONLYIF readonlyRun(o,d) BACKGROUND background(d,o) name, planned, description PANEL
    //PROPERTIES (d) READONLYIF readonlyRun(o,d) PANEL description, historyValue SHOWIF prevLog(d)
    PROPERTIES (d) PANEL newComment, addComment
    PROPERTIES TOOLBAR pushBudgetDetail(o,d) SHOWIF readonlyRun(o,d), addBudgetDetail(o), DELETE (d)
    PROPERTIES dateSorting = toDate(budget(d)) SHOWIF NULL 
    ORDER dateSorting DESC , planned(d) DESC
    FILTERS costCenter(d) == costCenter(o),
            //isParent(costItem(d),t),
            budget(d) == filterBudget() OR NOT filterBudget(),
            isParent(filterCostItem(),costItem(d)) OR NOT filterCostItem(),
            (hideSensitive(mainRole(currentUser())) AND NOT sensitive(d)) OR NOT hideSensitive(mainRole(currentUser()))
    FILTERGROUP newAndOld
        FILTER 'Show items from this proposal only' part(d) == o
        
    OBJECTS m = Message
    PROPERTIES(m) READONLY BACKGROUND backgroundMessage(m) textPrint, nameAuthorShort, dateTime SHOWIF NULL
    ORDER dateTime(m) DESC
    FILTERS budgetDetail(m) == d
    
    EVENTS ON APPLY AFTER seekLastMessageInFullChat()
    ;
    
    seekLastMessageInFullChat() + { 
        SEEK FIRST ##form.m;
    }

    DESIGN ##form {
        OBJECTS {
            NEW pane FIRST {
                fill = 5;
                alignment = STRETCH;
                type = CONTAINERH;
                NEW allDetails {
                    type = CONTAINERV;
                    fill = 3;
                    alignment = STRETCH;
                    NEW headerPart {
                        alignment = STRETCH;
                        type = CONTAINERH;
                        MOVE PROPERTY(planned(o)) { caption = 'Planned by new Budget items, USD'; }
                        MOVE PROPERTY(authorName(o));// { alignment = CENTER; }
                        //MOVE PROPERTY(dateTime(o));
                    }
                    NEW category {
                        caption = 'Block of filters';
                        type = CONTAINERH;
                        alignment = STRETCH;
                        //flex = 1;
                        MOVE PROPERTY(nameCostCenter(o)) { alignment = START; alignment = STRETCH;} //charWidth = 50;
                        MOVE PROPERTY (nameFilterBudget()) { caption = 'Filter by Budget'; }
                        //MOVE BOX (TREE costItems) { caption = 'Filter by Cost Type'; }
                        MOVE PROPERTY (nameFilterCostItem()) { caption = 'Filter by Cost Type'; alignment = STRETCH;}
                    }
                    MOVE BOX (d) { 
                        fill = 1; 
                        //width = 850;
                        caption = 'List of Budget Details'; 
                        PROPERTY(nameBudget(d)) { fontStyle = 'bold'; }
                        TOOLBAR {
                            MOVE PROPERTY(addBudgetDetail(o));
                        }
                    }
                }
                NEW chat {
                    caption = 'Comments';
                    type = CONTAINERV;
                    //fill = 1;
                    width = 500;
                    alignment = STRETCH;
                    NEW commentsAll {
                        type = TABBED;
                        fill = 1;
                        NEW commentsChat {
                            fill = 1;
                            caption = 'Message Chat';
                            MOVE BOX(m) {
                                PROPERTY(textPrint(m)) {alignment = STRETCH;}
                                REMOVE TOOLBARLEFT(m);
                            }
                        }
                        NEW descAll {
                            fill = 1;
                            caption = 'Description';
                            MOVE PROPERTY (description(d)) { caption = ''; fill = 1;}
                        }
                    }
                    MOVE PROPERTY(newComment(d)) { alignment = STRETCH; panelCaptionAbove = TRUE; }
                    MOVE PROPERTY(addComment(d)) { alignment = CENTER; }
                }
            }
        }
    }
END
@extendBudgetPortion(budgetPortion);
@extendBudgetPortion(update);
@extendBudgetPortion(enter);
@extendBudgetPortion(review);
@extendBudgetPortion(reject);

FORM steplog 'Budgeting log'
    OBJECTS l = StepLog
    PROPERTIES(l) READONLY authorName, dateTime, planned READONLY
    
    OBJECTS d = BudgetDetailLog
    PROPERTIES READONLY =description(budget(d)), =name(costCenter(d)), =canonicalName(costItem(d))
    PROPERTIES (d) READONLY name, planned, description PANEL
    FILTERS log(d) == l
;
DESIGN steplog {
    OBJECTS { 
        NEW pane { 
            fill = 2; 
            alignment = STRETCH; 
        }
        NEW details { 
            fill = 1; 
            caption = 'Details of budgeting log';
            type = CONTAINERH; 
            alignment = STRETCH; 
            MOVE BOX(d) {
                caption = '';
                fill = 4;
                alignment = STRETCH;
            }
            MOVE PROPERTY(description(d)) {
                fill = 1;
                alignment = STRETCH;
                panelCaptionAbove = TRUE;
            }
        }
    }
}
@extendDetails(steplog,pane,h);
@showStepAttributes(steplog,in);
@showStepAttributes(steplog,out);

EXTEND FORM budgetPortions OBJECTS l = StepLog PROPERTIES planned(l) READONLY FILTERS sbj(l) == o AND stepOut(l);
@extendDetails(budgetPortions,proc,v);
@showStepAttributes(budgetPortions,out);

// overview form 

quarterName 'Quarter' (INTEGER q) =  STRING[4](floor(q/10)) + ' \'Q' + STRING[1] (q - floor(q/10)*10);

quarterPlanned 'Planned, USD' (CostCenter c, INTEGER q) = GROUP SUM planned(BudgetDetail d) IF q == quarterNumber(budget(d)) AND c == costCenter(d);
quarterSpent 'Spent, USD' (CostCenter c, INTEGER q) = GROUP SUM spent(BudgetDetail d) IF q == quarterNumber(budget(d)) AND c == costCenter(d);
quarterProposal 'Budgeting status' (CostCenter c, INTEGER q) = GROUP LAST nameStep(part(BudgetDetail d)) IF q == quarterNumber(budget(d)) AND c == costCenter(d) ORDER dateTime(part(d)) CHARWIDTH 10;

filterCostCenter = DATA LOCAL NESTED CostCenter();
nameFilterCostCenter 'CostCenter' () = name(filterCostCenter());

FORM budgetPortionsOverview 'Quarter Budgets'
    PROPERTIES () nameFilterCostCenter

    OBJECTS qc=(q = INTEGER, c = CostCenter)
    PROPERTIES(q) quarterName, VALUE//SHOWIF NULL 
    PROPERTIES(c) name
    PROPERTIES (c,q) quarterProposal, quarterPlanned, quarterSpent
    ORDER quarterName(q) DESC
    FILTERS quarterPlanned(c,q) > 0,
            c == filterCostCenter() OR NOT filterCostCenter()

    OBJECTS d = BudgetDetail
    PROPERTIES (d) READONLY nameBudget, canonicalNameCostItem, name, planned
    PROPERTIES dateSorting = toDate(budget(d)) SHOWIF NULL 
    ORDER dateSorting DESC , planned(d) DESC
    FILTERS costCenter(d) == c,
            q == quarterNumber(budget(d)),
            (hideSensitive(mainRole(currentUser())) AND NOT sensitive(d)) OR NOT hideSensitive(mainRole(currentUser()))
;

DESIGN budgetPortionsOverview {
    OBJECTS {
        type = SPLITH;
        PROPERTY (nameFilterCostCenter()) {alignment = STRETCH; caption = 'Autofilter by CostCenter';}
    }
}

NAVIGATOR {
    proc { NEW budgetPortions AFTER assignments; }
    logging { NEW budgetPortionsOverview; NEW steplog;}
}
