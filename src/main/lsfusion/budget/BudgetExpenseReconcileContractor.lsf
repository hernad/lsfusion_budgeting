MODULE BudgetExpenseReconcileContractor;

REQUIRE BudgetExpenseReconcile, BudgetContract, PaymentCycle, BudgetExpense;

NAMESPACE Budget;

contractor 'Contractor' = ABSTRACT Contractor(ExpenseLedger);
contractorManual 'Contractor' = DATA Contractor(Expense);

contractorAutomate 'Automotive Search' (Expense e) = GROUP LAST contractor(AccountingName a) IF isSubstring(lower(note(e)), lower(name(a))) OR isSubstring(lower(reference(e)),lower(name(a)));

contractor 'Contractor' (Expense e) = OVERRIDE contractorManual(e), contractor(invoice(part(e))), contractorAutomate(e) MATERIALIZED;

contractor(Expense e) += contractor(e);

selectContractor (Expense e)  { 
    DIALOG dialogContractor OBJECTS c INPUT DO {
        contractorManual(e) <- c;
    }
}

nameContractor 'Contractor' (ExpenseLedger e) = name(contractor(e));

paidCurrency 'Paid Currency' = GROUP SUM amount(Expense e) BY contractor(e),currency(e) MATERIALIZED;
//paidUSD 'Paid, USD' (Contractor c) = GROUP SUM round2 (paidCurrency(c,Currency cur) / defaultRateOn(cur, currentDate())) MATERIALIZED;
paidUSD 'Paid, USD' = GROUP SUM amountUSD(Expense e) BY contractor(e) MATERIALIZED;
noteText 'Note & Reference' (Expense e) = CONCAT '\nReference: ',TEXT (note(e)), TEXT (reference(e));
assigned 'Assigned, %' (Expense x, Employee e) = (OVERRIDE dataAssigned(period(costCenter(x),budget(date(x))), budget(date(x)), e), 
    (assigned(period(costCenter(x),budget(date(x))), e) IF selected(period(costCenter(x),budget(date(x))), budget(date(x))))) 
        IF NOT date(x) < fromDate(monthFrom(e)) AND NOT date(x) > fromDate(monthTo(e)) MATERIALIZED     ; 

EXTEND FORM expenses
    PROPERTIES (e) READONLY nameContractor
    PROPERTIES (ie) ON CHANGE selectContractor(ie) nameContractor
    
    OBJECTS cc = Currency
    
    OBJECTS ct = Contractor
    PROPERTIES(ct) READONLY name
    PROPERTIES paidCurrency(ct,cc) COLUMNS (cc) HEADER name(cc)
    
    OBJECTS ec = Expense
    PROPERTIES (ec) READONLY date, nameCurrency, amount, nameCostCenter, nameCostItem, completeNameBudgetDetail, descriptionPurchaseInvoice, nameGLAccount, noteText PANEL 
    FILTERS contractor(ec) == ct
    
    OBJECTS em = Employee
    //PROPERTIES READONLY nameCostCenter(ec) DRAW em
    PROPERTIES (em) READONLY firstName, lastName, namePosition
    PROPERTIES assigned(ec,em)
    FILTERS assigned(ec,em) > 0
    
    FILTERGROUP contractors
    FILTER 'Have expenses' paidUSD(ct) > 0 DEFAULT 
;

DESIGN expenses {
    pane {
        NEW contractor AFTER budget {
            caption = 'Contractors';
            type = CONTAINERH;
            fill = 1;
            alignment = STRETCH;
            NEW listContractor {
                width = 500;
                alignment = STRETCH;
                MOVE BOX (ct);
            }
            NEW detailContractor {
                type = CONTAINERV;
                fill = 1;
                MOVE BOX (ec);
                MOVE PROPERTY (noteText(ec)) { panelCaptionAbove = TRUE; alignment = STRETCH; }
                MOVE BOX (em);
            }
        }
    }
}

EXTEND FORM contractors
    PROPERTIES (c) paidUSD

    OBJECTS e = Expense
    PROPERTIES (e) expenseType, date, nameGLAccount, note, reference, nameCurrency, amount, nameCostCenter, nameCostItem, completeNameBudgetDetail, descriptionPurchaseInvoice
    FILTERS contractor(e) == c
;
    
DESIGN contractors { detailContractor { MOVE BOX (e) FIRST; } }

reconcileAuto() + { 
    LOCAL locRec = BOOLEAN (Expense);
    locRec(Expense e) <- toReconcile(e) AND [ FILTER expenses.ie](e);
    
    LOCAL locInv = Invoice (Expense);
    locInv (Expense e) <- (GROUP LAST Invoice i IF contractor(i) == contractor(e) AND amount(i) == amount(e) AND paid(i)) WHERE locRec(e);
    
    purchaseInvoice(Expense e) <- locInv(e) WHERE locInv(e);
    budgetDetail(Expense e) <- budgetDetail(purchaseInvoice(e)) WHERE locInv(e);
    costItem(Expense e) <- costItem(budgetDetail(purchaseInvoice(e))) WHERE locInv(e);
    costCenter(Expense e) <- costCenter(budgetDetail(purchaseInvoice(e))) WHERE locInv(e);
}

