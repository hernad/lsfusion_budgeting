MODULE BudgetContractScoring;

REQUIRE BudgetExpenseReconcileContractor;

NAMESPACE Budget;

CLASS Scoring 'Contractors Scoring';
TABLE scoring (Scoring);

number '#' = DATA INTEGER (Scoring) CHARWIDTH 2;
criteria 'Criteria' = DATA ISTRING (Scoring) CHARWIDTH 50;
criteriaText 'Criteria' (Scoring s) = TEXT (criteria(s));
short 'Criteria name' = DATA ISTRING[15] (Scoring) CHARWIDTH 15;

criteriaAmountNum 'Amount of Criteria' = DATA INTEGER ();

TABLE assessmentOverall (Contractor, Employee);
TABLE assessmentScore (Contractor, Employee, Scoring);
TABLE assessmentScoreLog (Contractor, Employee, Scoring, INTEGER);

comment 'Comment' = DATA TEXT (Contractor, Employee);
assessmentScoreNum 'Assessment' = DATA INTEGER (Contractor, Employee, Scoring);

votedCriteria 'Number of criteria voted' = GROUP SUM 1 IF assessmentScoreNum (Contractor c, Employee e, Scoring s) BY c,e;
votedAllCriteria (Contractor c, Employee e) = votedCriteria(c,e) == criteriaAmountNum();

voted 'Voted' = GROUP SUM 1 IF votedAllCriteria(Contractor c, Employee e) BY c; 
assessmentOverall 'Overall' = GROUP SUM assessmentScoreNum(Contractor c, Employee e, Scoring s) IF votedAllCriteria(c,e) BY c;
assessment 'Assessment' (Contractor c) = NUMERIC[17,2](NUMERIC[17,2](assessmentOverall(c)) / voted(c) / criteriaAmountNum());

commentOverall 'Overall Comment' = GROUP CONCAT '\n', name(Employee e) + ': ' + comment(Contractor c, e) IF votedAllCriteria(c,e) BY c;

showScoring = GROUP SUM assigned(Expense s, Employee e) IF contractor(s) == Contractor c BY c,e;

// Managers of the Contractor
CLASS Manager 'Managers';
TABLE manager (Manager);

name 'Name' = DATA ISTRING[30] (Manager);
email 'Email' = DATA ISTRING[30] (Manager);
phone 'Phone' = DATA ISTRING[30] (Manager);
comment 'Comment' = DATA ISTRING[30] (Manager);

assessment 'Search' = DATA BOOLEAN (Contractor, Employee, Scoring, INTEGER);
range 'Range for assessment' (INTEGER i) = GROUP MAX i IF iterate(i, 1, 5);
ballVal 'Value' (INTEGER i) = STRING[1](i);

WHEN LOCAL SETCHANGED (assessment(Contractor c, Employee em, Scoring s, INTEGER i)) DO {
    FOR iterate(INTEGER var, 1, 5) DO {
        IF i == var THEN {
            IF assessment(c,em,s,i) THEN assessmentScoreNum(c,em,s) <- i;
            ELSE assessmentScoreNum(c,em,s) <- NULL;
        } 
        ELSE assessment(c,em,s,var) <- NULL;
    }
}

WHEN LOCAL DROPPED (assessment(Contractor c, Employee em, Scoring s, INTEGER i)) DO {
    assessmentScoreNum(c,em,s) <- NULL;
}

EXTEND FORM contractors
    OBJECTS em = Employee
    FILTERS em == currentUser()

    PROPERTIES(c) assessment AFTER name(c), commentOverall PANEL 
    
    OBJECTS ball = INTEGER
    PROPERTIES range(ball) SHOWIF NULL
    ORDERS range(ball)
    FILTERS range(ball)
    
    OBJECTS s = Scoring
    PROPERTIES (s)  READONLY number, criteria // criteriaText // SHOWIF showScoring(c,em)
    PROPERTIES assessment(c,em,s,ball) COLUMNS (ball) HEADER range(ball)
    PROPERTIES  comment(c,em) PANEL // assessmentScoreNum(c,em,s),  // SHOWIF showScoring(c,em)
    ORDERS number(s)
    
    OBJECTS m = Manager
    PROPERTIES (m)  name, email, phone, comment, NEW, DELETE // READONLYIF NOT showScoring(c,em) // SHOWIF showScoring(c,em)
;

DESIGN contractors {
    detailContractor {    
        NEW scoring AFTER BOX (e) {
            caption = 'Scoring';
            fill = 1;
            MOVE BOX (s) { fill = 1; }
            NEW scoreTab {
                caption = 'Experience';
                type = TABBED;
                fill = 1;
                alignment = STRETCH;
                NEW commentEmployee {
                    caption = 'Your Comment';
                    fill = 1;
                    alignment = STRETCH;
                    MOVE PROPERTY (comment(c,em)) { caption = ''; alignment = STRETCH; fill = 1; }
                }
                NEW commentOverall {
                    caption = 'Overall Comment';
                    fill = 1;
                    alignment = STRETCH;
                    MOVE PROPERTY (commentOverall(c)) { caption = ''; alignment = STRETCH; fill = 1;}
                }
                MOVE BOX (m) {
                    fill = 1;
                    alignment = STRETCH;
                }
            }
        }
    }
}

FORM criteria
    PROPERTIES criteriaAmountNum()
    
    OBJECTS s = Scoring
    PROPERTIES (s) number, criteria, short, NEW , DELETE 
;

NAVIGATOR { 
    masterData {
        cycles {
            NEW criteria;
        }
    }
}